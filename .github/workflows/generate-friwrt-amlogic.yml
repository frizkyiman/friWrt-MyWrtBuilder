#=====================================================================================
#
# Description:   Build OpenWrt with Image Builder
# This file is a part of the make OpenWrt for Amlogic s9xxx tv box
# https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Documentation: https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
#
#=====================================================================================

name: Generate friWrt Amlogic Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:23.05.2"
        type: choice
        options:
          - openwrt:21.02.7
          - openwrt:23.05.2
          - immortalwrt:21.02.7
          - immortalwrt:23.05.1
      target:
        description: "Select device board"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - hg680p
          - b860h
          - nanopi-r5s
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.1_6.1.1"
        type: choice
        options:
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1
          - 5.4.1
          - 5.10.1
          - 5.15.1
          - 6.1.1
      auto_kernel:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean
      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "ophub/kernel"
        type: choice
        options:
          - ophub/kernel
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta
      tunnel:
        description: "Select VPN Client app (!passwall only support for newer branch with fw4 firewall!):"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - openclash
          - passwall
          - openclash-passwall
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "false"
        type: boolean
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean

env:
  TYPE: AMLOGIC
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  PRE_RELEASE: ${{ inputs.upload-prerelease }}

jobs:
  Generate:
    name: amlogic-${{ inputs.target }}-${{ inputs.release_branch }}-${{ inputs.tunnel }}
    runs-on: ubuntu-latest

    steps:
      - name: Initialization System Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"

      - name: Setup Environment Variables
        run: |
          if [ "$TARGET" == "all" ]; then
            echo "openwrt_board=all" >> $GITHUB_ENV
          elif [ "$TARGET" == "hg680p" ] || [ "$TARGET" == "b860h" ]; then
            echo "openwrt_board=s905x" >> $GITHUB_ENV
          elif [ "$TARGET" == "nanopi-r5s" ]; then
            echo "openwrt_board=rk3568" >> $GITHUB_ENV
          fi
          if [ "$RELEASE_BRANCH" == "openwrt:23.05.2" ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=arm64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          elif [ "$RELEASE_BRANCH" == "immortalwrt:23.05.1" ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=arm64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          else
            echo "PROFILE=Default" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armvirt/64" >> $GITHUB_ENV
            echo "TARGET_NAME=armvirt-64" >> $GITHUB_ENV
            echo "ARCH_1=arm64" >> $GITHUB_ENV
            echo "ARCH_2=arm64" >> $GITHUB_ENV
            echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          fi
          echo "WORKING_DIR="${RELEASE_BRANCH%:*}"-imagebuilder-"$TARGET_NAME".Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads."${RELEASE_BRANCH%:*}".org" >> $GITHUB_ENV
          echo "BASE=${RELEASE_BRANCH%:*}" >> $GITHUB_ENV
          echo "BRANCH=${RELEASE_BRANCH#*:}" >> $GITHUB_ENV
          echo "tags=$( [[ "${RELEASE_BRANCH#*:}" == "21.02.7" ]] && echo "21.02" )" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV
      
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          path: origin

      - name: Download Image Builder
        id: download
        run: |
          RELEASE="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
          wget -nv "$RELEASE"
          tar -xJf *-imagebuilder-* && sync && rm -f *-imagebuilder-*.tar.xz && mv *-imagebuilder-* $WORKING_DIR && sync
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$WORKING_DIR
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash external-package-urls.sh
          bash scripts/amlogic_service.sh
          if [[ "$BRANCH" == "21.02.7" ]]; then
             grep -E "^all-all|^old-$tags|^amlogic-$tags|^amlogic" external-package-urls.txt | awk '{print $2}' > output_url.txt
          else
             grep -E "^all-all|^all|^amlogic" external-package-urls.txt | grep -vE "^amlogic-$tags" | awk '{print $2}' > output_url.txt
          fi
          wget --no-check-certificate -i output_url.txt -nv -P packages
          echo "status=success" >> $GITHUB_OUTPUT
         
      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          bash scripts/builder-patch.sh
          bash scripts/agh-core.sh
          bash scripts/misc.sh
          if [[ "$TUNNEL" == "all" && "$BRANCH" != "21.02.7" ]]; then 
              echo "VPN Client: $TUNNEL"
              bash scripts/tunnel_app.sh openclash-passwall
          elif [[ ("$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall") && "$BRANCH" != "21.02.7" || "$TUNNEL" == "openclash" ]]; then
              echo "VPN Client: $TUNNEL"
              bash scripts/tunnel_app.sh "$TUNNEL"
          elif [[ "$TUNNEL" == "all" && "$BRANCH" = "21.02.7" ]]; then 
              echo "VPN Client: $TUNNEL"
              bash scripts/tunnel_app.sh openclash
          else
              echo "No VPN Client selected"
          fi
          if [ "$TUNNEL" = "openclash" ] || [ "$TUNNEL" = "openclash-passwall" ] || [ "$TUNNEL" = "all" ]; then bash scripts/clash-core.sh; fi
          ls packages
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage before starting to compile: \n$(df -hT ${PWD}) \n"

      - name: Compile Firmware
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          mkdir -p compiled_images
          if [[ "$TUNNEL" == "all" && "$BRANCH" != "21.02.7" ]]; then
            for t in openclash-passwall openclash passwall no-tunnel; do
              echo "Compiling with VPN Client: $t"
              if [ "$CLEAN" == "true" ]; echo "Start 'make clean' before building images."; then make clean; fi
              time bash make-build.sh $PROFILE $t
              for file in bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz; do mv "$file" compiled_images; done
            done
          elif [[ "$TUNNEL" == "all" && "$BRANCH" = "21.02.7" ]]; then
            for t in openclash no-tunnel; do
              echo "Compiling with VPN Client: $t"
              if [ "$CLEAN" == "true" ]; echo "Start 'make clean' before building images."; then make clean; fi
              time bash make-build.sh $PROFILE $t
              for file in bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz; do mv "$file" compiled_images; done
            done
          elif [[ ("$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall") && "$BRANCH" != "21.02.7" || "$TUNNEL" == "openclash" || "$TUNNEL" == "no-tunnel" ]]; then
            echo "Compiling with VPN Client: $TUNNEL"
            bash make-build.sh $PROFILE $TUNNEL
            for file in bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz; do mv "$file" compiled_images; done
          fi
          ls -l compiled_images
          echo "status=success" >> $GITHUB_OUTPUT
          echo -e "Server space usage after compilation: \n$(df -hT ${PWD}) \n"

      - name: Clear server space
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        run: |
          cd $WORKING_DIR
          rm -rf $(ls . | grep -v "^compiled_images$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Packaging OpenWrt
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: $WORKING_DIR/compiled_images/*rootfs.tar.gz
          openwrt_board: ${{ env.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}

      - name: Prepare file before upload
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        id: prep_upload
        run: |
          cd $WORKING_DIR
          cd ${{ env.PACKAGED_OUTPUTPATH }}
          for file in *amlogic*.img.gz; do mv "$file" fri_$(basename "$file" .img.gz)$( echo "_$TUNNEL" ).img.gz; done
          rm -r *.sha && sha256sum *.img.gz > sha256sums
          ls -l
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Add changelog info to new release description
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        id: read_release
        shell: bash
        run: |
          cd $WORKING_DIR
          ls -l
          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' changelog.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"  
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        if: ${{ steps.prep_upload.outputs.status }} == 'success' && !cancelled()
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.PACKAGED_OUTPUTPATH }}/*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: ophub/amlogic-${{ env.TARGET }}-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATEMONTH }}
          overwrite: true
          prerelease: ${{ env.PRE_RELEASE }}
          body: |
            ### friWrt ${{ env.BASE }}-${{ env.BRANCH }} Image information
            Build date: ${{ env.DATETIME }}
            
            ${{ steps.read_release.outputs.RELEASE_BODY }}
            
            See [here](https://github.com/frizkyiman/friWrt-MyWrtBuilder?tab=readme-ov-file#firmware-details) for more detail feature and other information.
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: friwrt
            - Default WIFI name: friWrt_2g | friWrt_5g (if device supported)
            - Default WIFI password: friwrt2023 (if device supported)
            
            ### Install to EMMC
            - Login to OpenWrt → System → Amlogic Service → Install OpenWrt

      - name: Find Firmware files
        run: |
          FIRMWARE_FILES=$(find "${{ env.PACKAGED_OUTPUTPATH }}" -name "*.img.gz")

      - name: Send to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          MESSAGE_ID: "TESTER: Upload"
        run: |
          for file in $FIRMWARE_FILES; do
            curl -F chat_id="${TELEGRAM_CHAT_ID}" -F document=@"$file" -F caption="${MESSAGE_ID} ${file}" "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument"
          done
